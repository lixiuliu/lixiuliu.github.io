<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue基础-day01</title>
    <link href="/2021/03/08/vue%E6%A8%A1%E5%9D%97/"/>
    <url>/2021/03/08/vue%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>1.模块的缓存机制: 不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的加载效率</p><h4 id="认识vue"><a href="#认识vue" class="headerlink" title="认识vue"></a>认识vue</h4><p>特点:易用、灵活、高效</p><p>版本：2.6</p><p>作者：尤雨溪</p><p>兼容：IE8及以下不兼容</p><p>使用：1.引入vue.js</p><p> 2.创建挂载节点标签：不能是body或html</p><p> 3.实例化vue对象：a.挂载节点的选择器  b.模板中用到的所有数据</p><h4 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h4><p>定义：是自定义属性  ，&lt;标签 v-指令名=”变量、表达式”/&gt;</p><h6 id="常用指令："><a href="#常用指令：" class="headerlink" title="常用指令："></a>常用指令：</h6><p>1.v-html：渲染内容，可以编译html字符串</p><p>2.v-text:渲染内容</p><p>3.v-cloak：防止闪烁</p><p>4.v-pre：跳过编译</p><p>5.v-model:双向绑定( 1、 从数据到页面 2、 从页面到数据)</p><p>6.v-once：单项渲染，v-once的应用场景：如果显示的信息后续不需要再修改，你们可以使用v-once，这样可以提高性能。</p><h6 id="出错点：1-Vue不要写错2-引入Vue文件3-挂载节点不能是html或body标签4-指令内容的书写其实和差值表达式里是一样的-5-一个变量在data里面被定义在模板中使用时会报错的"><a href="#出错点：1-Vue不要写错2-引入Vue文件3-挂载节点不能是html或body标签4-指令内容的书写其实和差值表达式里是一样的-5-一个变量在data里面被定义在模板中使用时会报错的" class="headerlink" title="出错点：1.Vue不要写错2.引入Vue文件3.挂载节点不能是html或body标签4.指令内容的书写其实和差值表达式里是一样的 5.一个变量在data里面被定义在模板中使用时会报错的"></a>出错点：1.Vue不要写错2.引入Vue文件3.挂载节点不能是html或body标签4.指令内容的书写其实和差值表达式里是一样的 5.一个变量在data里面被定义在模板中使用时会报错的</h6><p>用来绑定事件的：v-on:click缩写为 @click</p><p>事件修饰符：在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</p><p>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></p><p>修饰符是由点开头的指令后缀来表示的</p><p>按键修饰符：</p><p>v-on:键盘事件类型.enter=’submit()’</p><p>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</p><h4 id="常用的按键修饰符"><a href="#常用的按键修饰符" class="headerlink" title="常用的按键修饰符"></a>常用的按键修饰符</h4><p>.enter =&gt;    enter键<br>.tab =&gt; tab键<br>.delete (捕获“删除”和“退格”按键) =&gt;  删除键<br>.esc =&gt; 取消键<br>.space =&gt;  空格键<br>.up =&gt;  上<br>.down =&gt;  下<br>.left =&gt;  左<br>.right =&gt;  右</p><h4 id="自定义按键修饰符别名"><a href="#自定义按键修饰符别名" class="headerlink" title="自定义按键修饰符别名"></a>自定义按键修饰符别名</h4><p>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</p><p>v-bind:1.v-bind 指令被用来响应地更新 HTML 属性</p><p>2.v-bind:href    可以缩写为    :href;</p><h5 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象:"></a>绑定对象:</h5><p>我们可以给v-bind:class 一个对象，以动态地切换class。</p><p>注意：v-bind:class指令可以与普通的class特性共存</p><p> v-bind 中支持绑定一个对象<br>    如果绑定的是一个对象 则 键为 对应的类名  值 为对应data中的数据 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html">1、 v-bind 中支持绑定一个对象 <br>如果绑定的是一个对象 则 键为 对应的类名  值 为对应data中的数据 <br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">HTML最终渲染为 &lt;ul class=&quot;box textColor textSize&quot;&gt;&lt;/ul&gt;</span><br><span class="hljs-comment">注意：</span><br><span class="hljs-comment">textColor，textSize  对应的渲染到页面上的CSS类名</span><br><span class="hljs-comment">isColor，isSize  对应vue data中的数据  如果为true 则对应的类名 渲染到页面上 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">当 isColor 和 isSize 变化时，class列表将相应的更新，</span><br><span class="hljs-comment">例如，将isSize改成false，</span><br><span class="hljs-comment">class列表将变为 &lt;ul class=&quot;box textColor&quot;&gt;&lt;/ul&gt;</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;textColor:isColor, textSize:isSize&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习Vue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习Node<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习React<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;&#123;color:activeColor,fontSize:activeSize&#125;&quot;</span>&gt;</span>对象语法<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>var vm= new Vue(&#123;<br><span class="css">    <span class="hljs-selector-tag">el</span><span class="hljs-selector-pseudo">:&#x27;.box&#x27;</span>,</span><br>    data:&#123;<br><span class="css">        <span class="hljs-selector-tag">isColor</span><span class="hljs-selector-pseudo">:true</span>,</span><br><span class="css">        <span class="hljs-selector-tag">isSize</span><span class="hljs-selector-pseudo">:true</span>，</span><br><span class="css">    <span class="hljs-selector-tag">activeColor</span><span class="hljs-selector-pseudo">:&quot;red&quot;</span>,</span><br><span class="css">        <span class="hljs-selector-tag">activeSize</span><span class="hljs-selector-pseudo">:&quot;25px&quot;</span>,</span><br>    &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="css">    <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">dashed</span> <span class="hljs-selector-id">#f0f</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.textColor</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">color</span>:<span class="hljs-selector-id">#f00</span>;</span><br><span class="css">        <span class="hljs-selector-tag">background-color</span>:<span class="hljs-selector-id">#eef</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.textSize</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">font-size</span><span class="hljs-selector-pseudo">:30px</span>;</span><br><span class="css">        <span class="hljs-selector-tag">font-weight</span><span class="hljs-selector-pseudo">:bold</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html">2、  v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据<br><br>这里的classA  对用data 中的  classA<br>这里的classB  对用data 中的  classB<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[classA, classB]&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习Vue<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习Node<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学习React<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> vm= <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    el:<span class="hljs-string">&#x27;.box&#x27;</span>,</span><br>    data:&#123;<br>        classA:‘textColor‘,<br>        classB:‘textSize‘<br>    &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">dashed</span> <span class="hljs-selector-id">#f0f</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.textColor</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">color</span>:<span class="hljs-selector-id">#f00</span>;</span><br><span class="css">        <span class="hljs-selector-tag">background-color</span>:<span class="hljs-selector-id">#eef</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.textSize</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">font-size</span><span class="hljs-selector-pseudo">:30px</span>;</span><br><span class="css">        <span class="hljs-selector-tag">font-weight</span><span class="hljs-selector-pseudo">:bold</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="绑定对象和绑定数组-的区别"><a href="#绑定对象和绑定数组-的区别" class="headerlink" title="绑定对象和绑定数组 的区别"></a>绑定对象和绑定数组 的区别</h4><ul><li><p>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </p></li><li><p>绑定数组的时候数组里面存的是data 中的数据 </p><h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><p>v-bind:style=”styleObject”</p><p>v-bind:style=”{ color: activeColor, fontSize: fontSize,background:’red’ }</p></li><li> <div v-bind:style="styleObject"></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jwt笔记</title>
    <link href="/2021/02/27/jwt%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/02/27/jwt%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h3 id="一、JWT-的认证机制"><a href="#一、JWT-的认证机制" class="headerlink" title="一、JWT 的认证机制"></a>一、JWT 的认证机制</h3><p>   用户信息通过加密签名后 token 字符串的形式, 保存在客户端浏览器中. 服务器通过解密客户端传来的 token 字符串</p><p>  来认证用户的身份</p><h3 id="二、JWT-的组成部分"><a href="#二、JWT-的组成部分" class="headerlink" title="二、JWT 的组成部分"></a>二、JWT 的组成部分</h3><p>   通常由三部分组成, 使用英文符号.进行分隔: Header.Payload.Signature</p><p>   Header: 头部</p><p>   Payload: 有效荷载, 这里存放的是经过加密后的用户信息</p><p>   Signature: 签名</p><h3 id="三、JWT-使用方式"><a href="#三、JWT-使用方式" class="headerlink" title="三、JWT 使用方式"></a>三、JWT 使用方式</h3><p>   服务端签发 TOKEN 到客户端后, 可以存储到 localStorage 中, 每次发送请求前都要带上这个 TOKEN, 推荐放在</p><p>  HTTP 请求头的 Authorization 字段中 (大事件项目中处理方式一致)</p><h3 id="1-安装-JWT-相关的包"><a href="#1-安装-JWT-相关的包" class="headerlink" title="1.安装 JWT 相关的包"></a>1.安装 JWT 相关的包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install jsonwebtoken express-jwt<br></code></pre></td></tr></table></figure><h3 id="2-安装并导入-JWT-相关的两个包，分别是-jsonwebtoken-和-express-jwt"><a href="#2-安装并导入-JWT-相关的两个包，分别是-jsonwebtoken-和-express-jwt" class="headerlink" title="2.安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt"></a>2.安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><span class="hljs-keyword">const</span> jwtParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-定义-secret-密钥"><a href="#3-定义-secret-密钥" class="headerlink" title="3.定义 secret 密钥"></a>3.定义 secret 密钥</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> secret=<span class="hljs-string">&#x27;itheima No1&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-在登录成功后生成-JWT-字符串"><a href="#4-在登录成功后生成-JWT-字符串" class="headerlink" title="4.在登录成功后生成 JWT 字符串"></a>4.在登录成功后生成 JWT 字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>    res.send(&#123;<br>        status: <span class="hljs-number">200</span>,<br>        message: <span class="hljs-string">&#x27;登录成功！&#x27;</span>,<br>        token: jwt.sign(&#123; <span class="hljs-attr">username</span>: userinfo.username &#125;, secretKey,&#123;<span class="hljs-attr">expiresIn</span>:<span class="hljs-string">&#x27;30s&#x27;</span>&#125;)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-将-JWT-字符串还原为-JSON-对象"><a href="#5-将-JWT-字符串还原为-JSON-对象" class="headerlink" title="5.将 JWT 字符串还原为 JSON 对象"></a>5.将 JWT 字符串还原为 JSON 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(expressJWT(&#123;<span class="hljs-attr">secret</span>:secretKey&#125;).unless(&#123;<span class="hljs-attr">path</span>:[<span class="hljs-regexp">/^\/api\//</span>]&#125;))<br></code></pre></td></tr></table></figure><h3 id="6-使用-req-user-获取用户信息"><a href="#6-使用-req-user-获取用户信息" class="headerlink" title="6.使用 req.user 获取用户信息"></a>6.使用 req.user 获取用户信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/admin/getinfo&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br> <span class="hljs-comment">//使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span><br>    res.send(&#123;<br>        status: <span class="hljs-number">200</span>,<br>        message: <span class="hljs-string">&#x27;获取用户信息成功！&#x27;</span>,<br>        data: req.user <span class="hljs-comment">// 要发送给客户端的用户信息</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="7-捕获解析-JWT-失败后产生的错误"><a href="#7-捕获解析-JWT-失败后产生的错误" class="headerlink" title="7.捕获解析 JWT 失败后产生的错误"></a>7.捕获解析 JWT 失败后产生的错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err.name === <span class="hljs-string">&#x27;UnauthorizedError&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">401</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;无效的token&#x27;</span> &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 其他原因导致错误</span><br>    res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;未知错误&#x27;</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
      <tag>jwt笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>express-session笔记</title>
    <link href="/2021/02/27/express-session%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/02/27/express-session%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h4 id="1-导入-express-模块"><a href="#1-导入-express-模块" class="headerlink" title="1.导入 express 模块"></a>1.导入 express 模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-创建-express-的服务器实例"><a href="#2-创建-express-的服务器实例" class="headerlink" title="2.创建 express 的服务器实例"></a>2.创建 express 的服务器实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = express()<br></code></pre></td></tr></table></figure><h4 id="3-配置-Session-中间件，调用session-方法生成读写session数据中间件"><a href="#3-配置-Session-中间件，调用session-方法生成读写session数据中间件" class="headerlink" title="3.配置 Session 中间件，调用session()方法生成读写session数据中间件"></a>3.配置 Session 中间件，调用session()方法生成读写session数据中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(session(&#123;<br><br>  secret: <span class="hljs-string">&#x27;keyboard cat&#x27;</span>,<br><br>  resave: <span class="hljs-literal">false</span>,<br><br>  saveUninitialized: <span class="hljs-literal">true</span>,<br><br>  <span class="hljs-comment">// cookie: &#123; secure: true &#125;</span><br><br>&#125;))<br><br></code></pre></td></tr></table></figure><h4 id="4-托管静态页面"><a href="#4-托管静态页面" class="headerlink" title="4.托管静态页面"></a>4.托管静态页面</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(express.static(<span class="hljs-string">&#x27;./pages&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="5-解析-POST-提交过来的表单数据"><a href="#5-解析-POST-提交过来的表单数据" class="headerlink" title="5.解析 POST 提交过来的表单数据"></a>5.解析 POST 提交过来的表单数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br></code></pre></td></tr></table></figure><h4 id="6-登录的-API-接口"><a href="#6-登录的-API-接口" class="headerlink" title="6.登录的 API 接口"></a>6.登录的 API 接口</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-comment">// 判断用户提交的登录信息是否正确</span><br><br>  <span class="hljs-keyword">if</span> (req.body.username !== <span class="hljs-string">&#x27;admin&#x27;</span> || req.body.password !== <span class="hljs-string">&#x27;000000&#x27;</span>) &#123;<br><br>    <span class="hljs-keyword">return</span> res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span> &#125;)<br><br>  &#125;<br>  <span class="hljs-comment">// req.body 获取请求体中的数据 &#123;username:&#x27;admin&#x27;,password:&#x27;000000&#x27;&#125;</span><br><br>  req.session.user = req.body<br><br>  req.session.isLogin = <span class="hljs-literal">true</span><br><br>  <span class="hljs-built_in">console</span>.log(req.session.user);<br><br>  res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span> &#125;)<br><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="7-获取用户姓名的接口"><a href="#7-获取用户姓名的接口" class="headerlink" title="7.获取用户姓名的接口"></a>7.获取用户姓名的接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/api/username&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-built_in">console</span>.log(req.session)<br><br>  <span class="hljs-comment">//从 Session 中获取用户的名称，响应给客户端</span><br><br>  <span class="hljs-keyword">if</span> (req.session.isLogin != <span class="hljs-literal">true</span>) &#123;<br><br>    <span class="hljs-keyword">return</span> res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;没有登录!&#x27;</span> &#125;)<br><br>  &#125;<br><br>  res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;获取用户名成功!&#x27;</span>, <span class="hljs-attr">username</span>: req.session.user.username &#125;)<br><br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="8-退出登录的接口"><a href="#8-退出登录的接口" class="headerlink" title="8.退出登录的接口"></a>8.退出登录的接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">app.post(<span class="hljs-string">&#x27;/api/logout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-comment">// TODO_04：清空 Session 信息</span><br><br>  <span class="hljs-comment">// 销毁当前用户存储的session数据</span><br><br>  req.session.destroy()<br><br>    <span class="hljs-comment">// 返回退出成功</span><br><br>  res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;退出成功!&#x27;</span> &#125;)<br><br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="9-调用-app-listen-方法，指定端口号并启动web服务器"><a href="#9-调用-app-listen-方法，指定端口号并启动web服务器" class="headerlink" title="9.调用 app.listen 方法，指定端口号并启动web服务器"></a>9.调用 app.listen 方法，指定端口号并启动web服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Express server running at http://localhost:3006&#x27;</span>)<br><br>&#125;)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>express-session</tag>
      
      <tag>express-session笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql语句</title>
    <link href="/2021/02/24/sql%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/24/sql%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="一、SQL-语句"><a href="#一、SQL-语句" class="headerlink" title="一、SQL 语句"></a>一、SQL 语句</h3>  <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">(1) 查询数据 select<br><br>  (2) 插入数据 insert<br><br>  (3) 更新数据 update<br><br>  (4) 删除数据 delete<br><br></code></pre></td></tr></table></figure><h3 id="二、查询数据语法"><a href="#二、查询数据语法" class="headerlink" title="二、查询数据语法"></a>二、查询数据语法</h3><ol><li><p>从指定表中查出所有列的数据</p><p><code>SELECT * FROM 表名称</code></p></li></ol><ol start="2"><li><p>从指定表中查出指定列的数据</p><p><code>SELECT 列名称 FROM 表名称</code></p></li></ol><h3 id="三、插入数据的语法"><a href="#三、插入数据的语法" class="headerlink" title="三、插入数据的语法"></a>三、插入数据的语法</h3><p>   向指定的数据表中插入一条数据</p><p>   <code>INSERT INTO 表名称(列1, 列2, ...) VALUES(值1, 值2, ...)</code></p><h3 id="四、更新数据语法"><a href="#四、更新数据语法" class="headerlink" title="四、更新数据语法"></a>四、更新数据语法</h3><p>   更新数据表中的某一列或多列数据</p><p>   <code>UPDATE 表名称 SET 列1=值1, 列2=值2 WHERE 列名称=值;</code></p><h3 id="五、删除数据语法"><a href="#五、删除数据语法" class="headerlink" title="五、删除数据语法"></a>五、删除数据语法</h3><p>   删除数据表中的某一行或多行数据</p><p>   <code>DELETE FROM 表名称 WHERE 列名称=值;</code></p><h3 id="六、WHERE-子句的作用"><a href="#六、WHERE-子句的作用" class="headerlink" title="六、WHERE 子句的作用"></a>六、WHERE 子句的作用</h3><p>   如果需要有条件的从表中选取数据, 可以使用 WHERE 子句添加到 SQL 语句的末尾</p><p>   <code>SELECT * FROM 表名称 WHERE 列名称 运算符 值</code></p><h3 id="七、常见的运算符"><a href="#七、常见的运算符" class="headerlink" title="七、常见的运算符"></a>七、常见的运算符</h3><p>   (1) &gt; 和 &gt;= </p><p>   (2) &lt; 和 &lt;=</p><p>   (3) != 或 &lt;&gt;</p><p>   (4) =</p><p>   (5) BETWEEN</p><p>   (6) LIKE</p><h3 id="八、AND-和-OR-运算符"><a href="#八、AND-和-OR-运算符" class="headerlink" title="八、AND 和 OR 运算符"></a>八、AND 和 OR 运算符</h3><p>   可以在 WHERE 子句中把多个条件结合起来, AND 表示并且, OR 表示或者的意思</p><p><code>select * from users where id=1 and username=&#39;xm&#39;;</code></p><p><code>select * from users where id=1 or username=&#39;xm&#39;;</code></p><h3 id="九、使用-ORDER-BY-子句对结果进行排序"><a href="#九、使用-ORDER-BY-子句对结果进行排序" class="headerlink" title="九、使用 ORDER BY 子句对结果进行排序"></a>九、使用 ORDER BY 子句对结果进行排序</h3><p>   <code>SELECT * FROM users ORDER BY status DESC;</code></p><p>   默认的排序方式为升序 ASC, 如果使用降序可以添加 DESC 关键字</p><h3 id="十、多重排序规则"><a href="#十、多重排序规则" class="headerlink" title="十、多重排序规则"></a>十、多重排序规则</h3><p>   <code>SELECT 列名称 FROM 表名称 ORDER BY 列名称 [排序规则], 列名称 [排序规则]</code></p><p> 注意：</p><p>   同时使用 ORDER BY 和 WHERE子句时, 应该让 ORDER BY 位于 WHERE 之后, 否则将会产生错误</p><h3 id="十一、COUNT-函数作用"><a href="#十一、COUNT-函数作用" class="headerlink" title="十一、COUNT 函数作用"></a>十一、COUNT 函数作用</h3><p>   可以返回匹配指定条件的行数</p><p>   <code>SELECT COUNT(*) FROM 表名称</code></p><h3 id="十二、使用-AS-为列名称设置别名"><a href="#十二、使用-AS-为列名称设置别名" class="headerlink" title="十二、使用 AS 为列名称设置别名"></a>十二、使用 AS 为列名称设置别名</h3><p>   示例: 给查询出来的用户起一个别名 </p><p>   <code>SELECT username As name FROM users;</code></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模块的加载机制</title>
    <link href="/2021/02/21/%E6%80%BB%E7%BB%93%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/21/%E6%80%BB%E7%BB%93%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>1.模块的缓存机制: 不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的加载效率<br>2.核心模块加载机制:require() 总是会优先加载核心模块<br>3.a.自定义模块的加载机制: 使用 require() 方法去加载自定义模块，必须指定 ‘/‘、 ‘./‘ 或 ‘../‘ 开头的路径，如果没有这个<br> 路径标识，node 会默认把它当作是一个核心模块或来自 node_modules 目录下的第三方模块<br> b.自定义文件模块：如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 .js、 .json 或 .node 拓展名再加载<br> c.自定义目录模块<br> 当传递一个目录标识符给 require () 方法时, 加载的顺序如下:<br> c1. 在加载的目录下查找 package.json 的文件, 并寻找main 属性作为 require 的入口<br> c2. 上述找不到,  Node.js 将会试图加载目录下的 index.js 或 index.node 文件<br>4.第三方模块的加载机制:如果传递给 require() 的模块标识符不是一个核心模块，也没有以 ‘/‘ 、 ‘../‘ 或 ‘./‘ 开头，<br> 那么 Node.js 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块。如果还是没有找到，<br>则移动到再上一层父目录，直到文件系统的根目录。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模块加载</tag>
      
      <tag>模块的加载机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm相关命令</title>
    <link href="/2021/02/21/npm%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <url>/2021/02/21/npm%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>1.npm -v 查看在自己电脑本机的 npm<br>2.<code>npm i 包的具体名称</code>   下载一个指定的包<br>3.<code>npm view 包的具体名称</code> 查看一个指定包<br>4.<code>npm i 包的具体名称@版本号</code> 下载指定版本的包<br>5.<code>npm i</code>   会自动根据 package.json 文件下载所有包<br>6.<code>npm init -y</code>  快速创建包管理配置文件(package.json)<br>7.<code>npm uninstall 包名称</code>  卸载指定的包<br>8. <code>npm i --save-dev 包名称@版本号</code> 或 <code>npm i -D 包名称@版本号</code>     安装开发测试阶段用到的包<br>9.(更换国内的源)在任意目录下执行： <code>npm config set registry=https://registry.npm.taobao.org</code><br>10.检查源有没有更换成功： <code>npm config get registry</code><br>11.补充：借助cnpm这个包<code>npm i -g cnpm</code>，提供了下载命令<code>cnpm i 包名称</code><br>12.(使用 nrm 切换源)在任意目录下依次执行：<code>npm i -g nrm</code> ==&gt; <code>nrm ls</code> ==&gt;<code>nrm use taobao</code><br>13. 线上和开发用到的包： <code>npm i 包名称</code><br>14.开发测试环境用到的包：<code>npm i -D 包名称</code><br>15. 全局包：安装命令： <code>npm i -g 包名称</code><br>      卸载命令： <code>npm uninstall -g 包名称</code><br> 16.使用一个把 markdown 格式的文档转成 html 格式文件的工具包<br>1a. 安装全局包： npm i -g i5ting_toc<br> 2a. 使用全局命令： <code>i5ting_toc -f 要转换的md文件 index.html</code><br>16.  发布包：<code>npm publish</code><br>17.删除已经发布的包：<code>npm unpublish 包名称 --force</code><br>18.登录账号：<code>npm login</code></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>npm相关命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS笔记</title>
    <link href="/2021/02/09/js%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/09/js%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>js笔记</p><p>NaN==NaN是错误的，因为它是非数值，非数值有很多不可能相等；</p><p>null==undefind;两个数相等；</p><p>null==null;相等；</p><p>浮点相加会有误差；</p><p>=赋值，把右边给左边；==判断两个值是否相等，只要求值相等，==默认转换数据类型 会把字符串转数字型 例如：console.log(18==’18’)；比较运算符里有字符串型的数字和数字型比较，则会隐式转换成数字型；两个比较值必须有一个是数值，不能都是字符串，必须把其中一个转换成数值；所有比较符都有隐式转换除了=和===没有隐式转换；两个字符串相比，是一个字符一个字符比较的。console.log(‘123’&gt;’15’)答案是true;</p><p>！=不等于；</p><p>===全等，全等的话必须是相同类型；</p><p>1、前置自增和后置自增单独使用效果一样；</p><p>后置自增口诀：先返回原值，后自加1，前置自增口诀：先整体加1，后返回值；</p><p>逻辑运算符：</p><p>&amp;&amp;且：两侧都为真结果才是真，只要一侧为假，结果是假。</p><p>两边都是 true才返回 true，否则返回 false</p><p>||或：两侧有一个真就是真，两侧都是假结果就是假。</p><p>！(true):非真即假；；</p><p>注意：非0即真；</p><p>判断if语句：if里面的表达式真就执行花括号里的，如果为假，执行后面的语句；else后没有条件语句，直接跟大括号；</p><p>三元运算符： ?  ‘true’ :  ‘ false’ ; 前面补零；</p><pre><code>&lt;script&gt;    var shu = prompt(&#39;请输入一个值：&#39;);    //当shu小于10时，shu前面自动补零，大于10则只输出shu；    var fh = shu &lt; 10 ? &#39;0&#39; + shu : shu;    alert(fh);&lt;/script&gt;</code></pre><p>真的话就直接是前者，假的话是后者 ;</p><pre><code>&lt;script&gt;    var num = 20;    var bij = num &lt; 5 ? &#39;是的&#39; : &#39;不是&#39;;    alert(bij);&lt;/script&gt;</code></pre><p>比较的时候可以找一个变量；</p><p>switch语句：</p><pre><code>&lt;script&gt;        switch (3) &#123;            case 2:                alert(&#39;这是2&#39;);                break;            case 3:                alert(&#39;这是3&#39;);                break;            case 4:                alert(&#39;这是4&#39;);                break;            case 5:                alert(&#39;这是5&#39;);                break;                 default:                alert(&#39;没有此数&#39;);        &#125;&lt;/script&gt;</code></pre><p>default是最后的结束；</p><p>switch里得值必须和case全等，类型一致；</p><p>如果当前case里没有break 则不会退出switch 是继续执行下一个case；</p><p>固定数用switch，范围数用if else if；</p><p>循环：</p><p>for循环：重复执行某些代码，通常跟计数有关系。</p><p>for（初始化变量；条件表达式；操作表达式）{</p><p>}</p><p>for (var i = 1; i&lt;=100; i++ ) {</p><p>console.log (‘你好吗’);</p><p>}</p><p>1、首先执行里面的计数器变量 var i=1 但是这句话在for里面只执行一次。</p><p>2、去i&lt;=100来判断是否满足条件，如果满足条件就去执行循环体，不满足退出循环。</p><p>3、最后执行i++，i++是单独写的代码   递增   第一轮结束</p><p>4、接着去执行i&lt;=100，如果满足条件就去执行循环，不满足条件退出循环       第二轮</p><p>数组：</p><p>var 数组名=[];数组里可以放任意的数据，字符串、数字、布尔值等；</p><p>数组通过索引访问、设置、修改队形的数字元素；如访问时数组没有和索引值对应的元素，得到的值是undefined;</p><p>计数器是i，数组元素是arr[i]；</p><p>函数：</p><p>function 动词() {</p><p>}</p><p>动词（）//调用</p><p>   function getSum(num1, num2) {</p><pre><code>  return num1 &gt; num2 ? num1 : num2;&#125;console.log(getSum(6, 3));</code></pre><p>注意：getSum把数值传给num1,num2，再在函数体里运行，最后结尾输出；</p><p>getSum后面直接是括号;</p><p>js高级笔记：</p><p>实例成员:和静态成员：</p><ol><li>实例成员: 只能通过实例对象才能访问的属性或方法</li><li>静态成员: 只能通过构造函数本身才能访问的属性或方法</li></ol><p>构造函数的原型：每个函数默认都有一个prototype属性，他得值默认是一个对象</p><p>1、在prototype(原型)上添加的方法或属性会被所有的实例对象所继承</p><p>2、非函数没有prototype的原型</p><p>3、定义构造函数时, 公共的方法定义在原型对象上, 这样可以被所有创建出来的实例直接继承</p><p>对象原型——proto——：</p><p>1、proto指向构造函数的原型prototype              proto是对象的原型    可以省略</p><p>2、先从自身的属性上进行查找，如果没有再去 proto 属性指向的对象上去查找</p><p>constructor构造函数：</p><p>1、当我们重新创建一个对象去覆盖原先的prototype时，constructor属性需要我们手动赋值</p><p>2、每个构造函数的原型上，默认都有一个constructor属性，他指向构造函数本身</p><p>原型链：</p><p>1、每个实例对象（ object ）都有一个私有属性（称之为 proto ）指向创建它的构造函数的原型对象（prototype ）。</p><p> 该原型对象也有一个自己的原型对象( proto ) ，层层向上直到一个对象的原型对象为 null。</p><p>2、null 没有原型，并作为这个原型链中的最后一个环节</p><p>3、如果对象上找不到这个属性，默认的是undefind</p><p>对象属性查找规则：</p><p>对象访问属性时遵从原型链的顺序</p><p>1、当访问一个对象的属性时，首先从这个对象自身进行查找</p><p>  2、 如果没有找到就从它的原型对象（proto）中查找</p><p>  3、如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null</p><p>原型对象中this指向：</p><p>1、函数中的 this 默认指向函数的调用者</p><p>2、构造函数的原型上this默认指向创建出来的实例对象</p><p>3、非函数指向的是window</p><p>拓展原型对象上的方法：</p><p>1、拓展原型对象上的方法时，不能直接覆盖原来的原型对象，只能添加或和修改方法</p><p>2、内置对象（如：Object, Array, Function） 上的原型对象不允许进行覆盖，只允许修改</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>搭建博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

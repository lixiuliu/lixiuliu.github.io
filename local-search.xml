<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS笔记</title>
    <link href="/2021/02/09/js%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/09/js%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>js笔记</p><p>NaN==NaN是错误的，因为它是非数值，非数值有很多不可能相等；</p><p>null==undefind;两个数相等；</p><p>null==null;相等；</p><p>浮点相加会有误差；</p><p>=赋值，把右边给左边；==判断两个值是否相等，只要求值相等，==默认转换数据类型 会把字符串转数字型 例如：console.log(18==’18’)；比较运算符里有字符串型的数字和数字型比较，则会隐式转换成数字型；两个比较值必须有一个是数值，不能都是字符串，必须把其中一个转换成数值；所有比较符都有隐式转换除了=和===没有隐式转换；两个字符串相比，是一个字符一个字符比较的。console.log(‘123’&gt;’15’)答案是true;</p><p>！=不等于；</p><p>===全等，全等的话必须是相同类型；</p><p>1、前置自增和后置自增单独使用效果一样；</p><p>后置自增口诀：先返回原值，后自加1，前置自增口诀：先整体加1，后返回值；</p><p>逻辑运算符：</p><p>&amp;&amp;且：两侧都为真结果才是真，只要一侧为假，结果是假。</p><p>两边都是 true才返回 true，否则返回 false</p><p>||或：两侧有一个真就是真，两侧都是假结果就是假。</p><p>！(true):非真即假；；</p><p>注意：非0即真；</p><p>判断if语句：if里面的表达式真就执行花括号里的，如果为假，执行后面的语句；else后没有条件语句，直接跟大括号；</p><p>三元运算符： ?  ‘true’ :  ‘ false’ ; 前面补零；</p><pre><code>&lt;script&gt;    var shu = prompt(&#39;请输入一个值：&#39;);    //当shu小于10时，shu前面自动补零，大于10则只输出shu；    var fh = shu &lt; 10 ? &#39;0&#39; + shu : shu;    alert(fh);&lt;/script&gt;</code></pre><p>真的话就直接是前者，假的话是后者 ;</p><pre><code>&lt;script&gt;    var num = 20;    var bij = num &lt; 5 ? &#39;是的&#39; : &#39;不是&#39;;    alert(bij);&lt;/script&gt;</code></pre><p>比较的时候可以找一个变量；</p><p>switch语句：</p><pre><code>&lt;script&gt;        switch (3) &#123;            case 2:                alert(&#39;这是2&#39;);                break;            case 3:                alert(&#39;这是3&#39;);                break;            case 4:                alert(&#39;这是4&#39;);                break;            case 5:                alert(&#39;这是5&#39;);                break;                 default:                alert(&#39;没有此数&#39;);        &#125;&lt;/script&gt;</code></pre><p>default是最后的结束；</p><p>switch里得值必须和case全等，类型一致；</p><p>如果当前case里没有break 则不会退出switch 是继续执行下一个case；</p><p>固定数用switch，范围数用if else if；</p><p>循环：</p><p>for循环：重复执行某些代码，通常跟计数有关系。</p><p>for（初始化变量；条件表达式；操作表达式）{</p><p>}</p><p>for (var i = 1; i&lt;=100; i++ ) {</p><p>console.log (‘你好吗’);</p><p>}</p><p>1、首先执行里面的计数器变量 var i=1 但是这句话在for里面只执行一次。</p><p>2、去i&lt;=100来判断是否满足条件，如果满足条件就去执行循环体，不满足退出循环。</p><p>3、最后执行i++，i++是单独写的代码   递增   第一轮结束</p><p>4、接着去执行i&lt;=100，如果满足条件就去执行循环，不满足条件退出循环       第二轮</p><p>数组：</p><p>var 数组名=[];数组里可以放任意的数据，字符串、数字、布尔值等；</p><p>数组通过索引访问、设置、修改队形的数字元素；如访问时数组没有和索引值对应的元素，得到的值是undefined;</p><p>计数器是i，数组元素是arr[i]；</p><p>函数：</p><p>function 动词() {</p><p>}</p><p>动词（）//调用</p><p>   function getSum(num1, num2) {</p><pre><code>  return num1 &gt; num2 ? num1 : num2;&#125;console.log(getSum(6, 3));</code></pre><p>注意：getSum把数值传给num1,num2，再在函数体里运行，最后结尾输出；</p><p>getSum后面直接是括号;</p><p>js高级笔记：</p><p>实例成员:和静态成员：</p><ol><li>实例成员: 只能通过实例对象才能访问的属性或方法</li><li>静态成员: 只能通过构造函数本身才能访问的属性或方法</li></ol><p>构造函数的原型：每个函数默认都有一个prototype属性，他得值默认是一个对象</p><p>1、在prototype(原型)上添加的方法或属性会被所有的实例对象所继承</p><p>2、非函数没有prototype的原型</p><p>3、定义构造函数时, 公共的方法定义在原型对象上, 这样可以被所有创建出来的实例直接继承</p><p>对象原型——proto——：</p><p>1、proto指向构造函数的原型prototype              proto是对象的原型    可以省略</p><p>2、先从自身的属性上进行查找，如果没有再去 proto 属性指向的对象上去查找</p><p>constructor构造函数：</p><p>1、当我们重新创建一个对象去覆盖原先的prototype时，constructor属性需要我们手动赋值</p><p>2、每个构造函数的原型上，默认都有一个constructor属性，他指向构造函数本身</p><p>原型链：</p><p>1、每个实例对象（ object ）都有一个私有属性（称之为 proto ）指向创建它的构造函数的原型对象（prototype ）。</p><p> 该原型对象也有一个自己的原型对象( proto ) ，层层向上直到一个对象的原型对象为 null。</p><p>2、null 没有原型，并作为这个原型链中的最后一个环节</p><p>3、如果对象上找不到这个属性，默认的是undefind</p><p>对象属性查找规则：</p><p>对象访问属性时遵从原型链的顺序</p><p>1、当访问一个对象的属性时，首先从这个对象自身进行查找</p><p>  2、 如果没有找到就从它的原型对象（proto）中查找</p><p>  3、如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null</p><p>原型对象中this指向：</p><p>1、函数中的 this 默认指向函数的调用者</p><p>2、构造函数的原型上this默认指向创建出来的实例对象</p><p>3、非函数指向的是window</p><p>拓展原型对象上的方法：</p><p>1、拓展原型对象上的方法时，不能直接覆盖原来的原型对象，只能添加或和修改方法</p><p>2、内置对象（如：Object, Array, Function） 上的原型对象不允许进行覆盖，只允许修改</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>搭建博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
